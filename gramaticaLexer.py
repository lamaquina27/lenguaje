# Generated from gramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,5,18,138,8,18,10,18,
        12,18,141,9,18,1,19,4,19,144,8,19,11,19,12,19,145,1,20,1,20,4,20,
        150,8,20,11,20,12,20,151,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,1,0,5,3,0,65,90,95,95,97,122,3,0,48,57,65,90,
        97,122,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,193,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,79,1,0,0,
        0,5,83,1,0,0,0,7,90,1,0,0,0,9,94,1,0,0,0,11,99,1,0,0,0,13,108,1,
        0,0,0,15,113,1,0,0,0,17,115,1,0,0,0,19,117,1,0,0,0,21,119,1,0,0,
        0,23,121,1,0,0,0,25,123,1,0,0,0,27,125,1,0,0,0,29,127,1,0,0,0,31,
        129,1,0,0,0,33,131,1,0,0,0,35,133,1,0,0,0,37,135,1,0,0,0,39,143,
        1,0,0,0,41,147,1,0,0,0,43,155,1,0,0,0,45,157,1,0,0,0,47,161,1,0,
        0,0,49,164,1,0,0,0,51,167,1,0,0,0,53,169,1,0,0,0,55,171,1,0,0,0,
        57,174,1,0,0,0,59,177,1,0,0,0,61,180,1,0,0,0,63,183,1,0,0,0,65,185,
        1,0,0,0,67,187,1,0,0,0,69,70,5,112,0,0,70,71,5,114,0,0,71,72,5,105,
        0,0,72,73,5,110,0,0,73,74,5,99,0,0,74,75,5,105,0,0,75,76,5,112,0,
        0,76,77,5,97,0,0,77,78,5,108,0,0,78,2,1,0,0,0,79,80,5,118,0,0,80,
        81,5,97,0,0,81,82,5,114,0,0,82,4,1,0,0,0,83,84,5,109,0,0,84,85,5,
        117,0,0,85,86,5,101,0,0,86,87,5,99,0,0,87,88,5,104,0,0,88,89,5,101,
        0,0,89,6,1,0,0,0,90,91,5,99,0,0,91,92,5,104,0,0,92,93,5,105,0,0,
        93,8,1,0,0,0,94,95,5,115,0,0,95,96,5,105,0,0,96,97,5,110,0,0,97,
        98,5,111,0,0,98,10,1,0,0,0,99,100,5,109,0,0,100,101,5,105,0,0,101,
        102,5,101,0,0,102,103,5,110,0,0,103,104,5,116,0,0,104,105,5,114,
        0,0,105,106,5,97,0,0,106,107,5,115,0,0,107,12,1,0,0,0,108,109,5,
        112,0,0,109,110,5,97,0,0,110,111,5,114,0,0,111,112,5,97,0,0,112,
        14,1,0,0,0,113,114,5,43,0,0,114,16,1,0,0,0,115,116,5,45,0,0,116,
        18,1,0,0,0,117,118,5,42,0,0,118,20,1,0,0,0,119,120,5,47,0,0,120,
        22,1,0,0,0,121,122,5,61,0,0,122,24,1,0,0,0,123,124,5,37,0,0,124,
        26,1,0,0,0,125,126,5,94,0,0,126,28,1,0,0,0,127,128,5,41,0,0,128,
        30,1,0,0,0,129,130,5,40,0,0,130,32,1,0,0,0,131,132,5,125,0,0,132,
        34,1,0,0,0,133,134,5,123,0,0,134,36,1,0,0,0,135,139,7,0,0,0,136,
        138,7,1,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,
        140,1,0,0,0,140,38,1,0,0,0,141,139,1,0,0,0,142,144,7,2,0,0,143,142,
        1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,40,1,
        0,0,0,147,149,3,65,32,0,148,150,7,3,0,0,149,148,1,0,0,0,150,151,
        1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,
        3,65,32,0,154,42,1,0,0,0,155,156,5,59,0,0,156,44,1,0,0,0,157,158,
        7,4,0,0,158,159,1,0,0,0,159,160,6,22,0,0,160,46,1,0,0,0,161,162,
        5,61,0,0,162,163,5,61,0,0,163,48,1,0,0,0,164,165,5,33,0,0,165,166,
        5,61,0,0,166,50,1,0,0,0,167,168,5,62,0,0,168,52,1,0,0,0,169,170,
        5,60,0,0,170,54,1,0,0,0,171,172,5,62,0,0,172,173,5,61,0,0,173,56,
        1,0,0,0,174,175,5,60,0,0,175,176,5,61,0,0,176,58,1,0,0,0,177,178,
        5,38,0,0,178,179,5,38,0,0,179,60,1,0,0,0,180,181,5,124,0,0,181,182,
        5,124,0,0,182,62,1,0,0,0,183,184,5,33,0,0,184,64,1,0,0,0,185,186,
        5,34,0,0,186,66,1,0,0,0,187,188,3,31,15,0,188,189,3,41,20,0,189,
        190,3,29,14,0,190,68,1,0,0,0,4,0,139,145,151,1,6,0,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINCIPAL = 1
    VAR = 2
    MUECHE = 3
    CHI = 4
    SINO = 5
    MIENTRAS = 6
    PARA = 7
    MAS = 8
    MENOS = 9
    MUL = 10
    DIV = 11
    IGUAL = 12
    MODULO = 13
    ELEVACION = 14
    PAR_DER = 15
    PAR_IZQ = 16
    LLAVE_DER = 17
    LLAVE_IZQ = 18
    ID = 19
    NUMERO = 20
    PALABRAS = 21
    PUNTO_COMA = 22
    WS = 23
    IGUALDAD = 24
    DIFERENTE = 25
    MAYOR = 26
    MENOR = 27
    MAYOR_IGUAL = 28
    MENOR_IGUAL = 29
    AND = 30
    OR = 31
    NOT = 32
    COMILLAS = 33
    STRING = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'principal'", "'var'", "'mueche'", "'chi'", "'sino'", "'mientras'", 
            "'para'", "'+'", "'-'", "'*'", "'/'", "'='", "'%'", "'^'", "')'", 
            "'('", "'}'", "'{'", "';'", "'=='", "'!='", "'>'", "'<'", "'>='", 
            "'<='", "'&&'", "'||'", "'!'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", "PARA", 
            "MAS", "MENOS", "MUL", "DIV", "IGUAL", "MODULO", "ELEVACION", 
            "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", "ID", "NUMERO", 
            "PALABRAS", "PUNTO_COMA", "WS", "IGUALDAD", "DIFERENTE", "MAYOR", 
            "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", "AND", "OR", "NOT", "COMILLAS", 
            "STRING" ]

    ruleNames = [ "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", 
                  "PARA", "MAS", "MENOS", "MUL", "DIV", "IGUAL", "MODULO", 
                  "ELEVACION", "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", 
                  "ID", "NUMERO", "PALABRAS", "PUNTO_COMA", "WS", "IGUALDAD", 
                  "DIFERENTE", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
                  "AND", "OR", "NOT", "COMILLAS", "STRING" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


