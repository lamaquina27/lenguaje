# Generated from gramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,270,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,141,
        8,8,10,8,12,8,144,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
        26,5,26,196,8,26,10,26,12,26,199,9,26,1,27,4,27,202,8,27,11,27,12,
        27,203,1,27,1,27,4,27,208,8,27,11,27,12,27,209,3,27,212,8,27,1,28,
        1,28,1,28,1,28,1,28,1,28,5,28,220,8,28,10,28,12,28,223,9,28,1,28,
        1,28,1,29,1,29,1,30,4,30,230,8,30,11,30,12,30,231,1,30,1,30,1,31,
        4,31,237,8,31,11,31,12,31,238,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,142,0,42,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,1,0,6,2,0,10,10,13,13,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,60,60,
        62,62,2,0,9,9,32,32,280,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,95,
        1,0,0,0,5,99,1,0,0,0,7,106,1,0,0,0,9,110,1,0,0,0,11,115,1,0,0,0,
        13,124,1,0,0,0,15,129,1,0,0,0,17,137,1,0,0,0,19,147,1,0,0,0,21,156,
        1,0,0,0,23,162,1,0,0,0,25,164,1,0,0,0,27,167,1,0,0,0,29,169,1,0,
        0,0,31,171,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,0,37,177,1,0,0,0,
        39,179,1,0,0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,185,1,0,0,0,47,187,
        1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,201,1,0,
        0,0,57,213,1,0,0,0,59,226,1,0,0,0,61,229,1,0,0,0,63,236,1,0,0,0,
        65,242,1,0,0,0,67,245,1,0,0,0,69,248,1,0,0,0,71,250,1,0,0,0,73,252,
        1,0,0,0,75,255,1,0,0,0,77,258,1,0,0,0,79,261,1,0,0,0,81,264,1,0,
        0,0,83,266,1,0,0,0,85,86,5,112,0,0,86,87,5,114,0,0,87,88,5,105,0,
        0,88,89,5,110,0,0,89,90,5,99,0,0,90,91,5,105,0,0,91,92,5,112,0,0,
        92,93,5,97,0,0,93,94,5,108,0,0,94,2,1,0,0,0,95,96,5,118,0,0,96,97,
        5,97,0,0,97,98,5,114,0,0,98,4,1,0,0,0,99,100,5,109,0,0,100,101,5,
        117,0,0,101,102,5,101,0,0,102,103,5,99,0,0,103,104,5,104,0,0,104,
        105,5,101,0,0,105,6,1,0,0,0,106,107,5,99,0,0,107,108,5,104,0,0,108,
        109,5,105,0,0,109,8,1,0,0,0,110,111,5,115,0,0,111,112,5,105,0,0,
        112,113,5,110,0,0,113,114,5,111,0,0,114,10,1,0,0,0,115,116,5,109,
        0,0,116,117,5,105,0,0,117,118,5,101,0,0,118,119,5,110,0,0,119,120,
        5,116,0,0,120,121,5,114,0,0,121,122,5,97,0,0,122,123,5,115,0,0,123,
        12,1,0,0,0,124,125,5,112,0,0,125,126,5,97,0,0,126,127,5,114,0,0,
        127,128,5,97,0,0,128,14,1,0,0,0,129,130,5,109,0,0,130,131,5,97,0,
        0,131,132,5,110,0,0,132,133,5,100,0,0,133,134,5,101,0,0,134,135,
        5,108,0,0,135,136,5,101,0,0,136,16,1,0,0,0,137,142,5,34,0,0,138,
        141,9,0,0,0,139,141,7,0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,
        144,1,0,0,0,142,143,1,0,0,0,142,140,1,0,0,0,143,145,1,0,0,0,144,
        142,1,0,0,0,145,146,5,34,0,0,146,18,1,0,0,0,147,148,5,116,0,0,148,
        149,5,114,0,0,149,150,5,97,0,0,150,151,5,105,0,0,151,152,5,103,0,
        0,152,153,5,97,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,20,1,
        0,0,0,156,157,5,102,0,0,157,158,5,117,0,0,158,159,5,110,0,0,159,
        160,5,99,0,0,160,161,5,97,0,0,161,22,1,0,0,0,162,163,5,46,0,0,163,
        24,1,0,0,0,164,165,5,46,0,0,165,166,5,46,0,0,166,26,1,0,0,0,167,
        168,5,63,0,0,168,28,1,0,0,0,169,170,5,191,0,0,170,30,1,0,0,0,171,
        172,5,43,0,0,172,32,1,0,0,0,173,174,5,45,0,0,174,34,1,0,0,0,175,
        176,5,42,0,0,176,36,1,0,0,0,177,178,5,47,0,0,178,38,1,0,0,0,179,
        180,5,61,0,0,180,40,1,0,0,0,181,182,5,37,0,0,182,42,1,0,0,0,183,
        184,5,94,0,0,184,44,1,0,0,0,185,186,5,41,0,0,186,46,1,0,0,0,187,
        188,5,40,0,0,188,48,1,0,0,0,189,190,5,125,0,0,190,50,1,0,0,0,191,
        192,5,123,0,0,192,52,1,0,0,0,193,197,7,1,0,0,194,196,7,2,0,0,195,
        194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,
        54,1,0,0,0,199,197,1,0,0,0,200,202,7,3,0,0,201,200,1,0,0,0,202,203,
        1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,211,1,0,0,0,205,207,
        5,46,0,0,206,208,7,3,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,
        1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,205,1,0,0,0,211,212,
        1,0,0,0,212,56,1,0,0,0,213,221,5,60,0,0,214,215,5,92,0,0,215,220,
        5,62,0,0,216,217,5,92,0,0,217,220,5,60,0,0,218,220,8,4,0,0,219,214,
        1,0,0,0,219,216,1,0,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,
        1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,
        5,62,0,0,225,58,1,0,0,0,226,227,5,59,0,0,227,60,1,0,0,0,228,230,
        7,0,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,
        1,0,0,0,232,233,1,0,0,0,233,234,6,30,0,0,234,62,1,0,0,0,235,237,
        7,5,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,240,1,0,0,0,240,241,6,31,0,0,241,64,1,0,0,0,242,243,
        5,61,0,0,243,244,5,61,0,0,244,66,1,0,0,0,245,246,5,33,0,0,246,247,
        5,61,0,0,247,68,1,0,0,0,248,249,5,62,0,0,249,70,1,0,0,0,250,251,
        5,60,0,0,251,72,1,0,0,0,252,253,5,62,0,0,253,254,5,61,0,0,254,74,
        1,0,0,0,255,256,5,60,0,0,256,257,5,61,0,0,257,76,1,0,0,0,258,259,
        5,38,0,0,259,260,5,38,0,0,260,78,1,0,0,0,261,262,5,124,0,0,262,263,
        5,124,0,0,263,80,1,0,0,0,264,265,5,33,0,0,265,82,1,0,0,0,266,267,
        5,34,0,0,267,268,1,0,0,0,268,269,6,41,1,0,269,84,1,0,0,0,11,0,140,
        142,197,203,209,211,219,221,231,238,2,6,0,0,0,1,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINCIPAL = 1
    VAR = 2
    MUECHE = 3
    CHI = 4
    SINO = 5
    MIENTRAS = 6
    PARA = 7
    MANDELE = 8
    BLOQUE_FUNCION = 9
    TRAIGASE = 10
    FUNCA = 11
    PUNTO = 12
    PUNTOPUNTO = 13
    PREG_DER = 14
    PREG_IZQ = 15
    MAS = 16
    MENOS = 17
    MUL = 18
    DIV = 19
    IGUAL = 20
    MODULO = 21
    ELEVACION = 22
    PAR_DER = 23
    PAR_IZQ = 24
    LLAVE_DER = 25
    LLAVE_IZQ = 26
    ID = 27
    NUMERO = 28
    PALABRAS = 29
    PUNTO_COMA = 30
    NL = 31
    WS = 32
    IGUALDAD = 33
    DIFERENTE = 34
    MAYOR = 35
    MENOR = 36
    MAYOR_IGUAL = 37
    MENOR_IGUAL = 38
    AND = 39
    OR = 40
    NOT = 41
    COMILLAS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'principal'", "'var'", "'mueche'", "'chi'", "'sino'", "'mientras'", 
            "'para'", "'mandele'", "'traigase'", "'funca'", "'.'", "'..'", 
            "'?'", "'\\u00BF'", "'+'", "'-'", "'*'", "'/'", "'='", "'%'", 
            "'^'", "')'", "'('", "'}'", "'{'", "';'", "'=='", "'!='", "'>'", 
            "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", "PARA", 
            "MANDELE", "BLOQUE_FUNCION", "TRAIGASE", "FUNCA", "PUNTO", "PUNTOPUNTO", 
            "PREG_DER", "PREG_IZQ", "MAS", "MENOS", "MUL", "DIV", "IGUAL", 
            "MODULO", "ELEVACION", "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", 
            "ID", "NUMERO", "PALABRAS", "PUNTO_COMA", "NL", "WS", "IGUALDAD", 
            "DIFERENTE", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
            "AND", "OR", "NOT", "COMILLAS" ]

    ruleNames = [ "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", 
                  "PARA", "MANDELE", "BLOQUE_FUNCION", "TRAIGASE", "FUNCA", 
                  "PUNTO", "PUNTOPUNTO", "PREG_DER", "PREG_IZQ", "MAS", 
                  "MENOS", "MUL", "DIV", "IGUAL", "MODULO", "ELEVACION", 
                  "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", "ID", 
                  "NUMERO", "PALABRAS", "PUNTO_COMA", "NL", "WS", "IGUALDAD", 
                  "DIFERENTE", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
                  "AND", "OR", "NOT", "COMILLAS" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


