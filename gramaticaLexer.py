# Generated from gramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,5,9,146,8,9,10,9,12,9,149,9,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,205,
        8,29,10,29,12,29,208,9,29,1,30,4,30,211,8,30,11,30,12,30,212,1,30,
        1,30,4,30,217,8,30,11,30,12,30,218,3,30,221,8,30,1,31,1,31,1,31,
        1,31,1,31,1,31,5,31,229,8,31,10,31,12,31,232,9,31,1,31,1,31,1,32,
        1,32,1,33,4,33,239,8,33,11,33,12,33,240,1,33,1,33,1,34,4,34,246,
        8,34,11,34,12,34,247,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,147,0,45,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,6,2,0,10,10,13,
        13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        2,0,60,60,62,62,2,0,9,9,32,32,289,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,0,0,5,100,1,
        0,0,0,7,104,1,0,0,0,9,111,1,0,0,0,11,115,1,0,0,0,13,120,1,0,0,0,
        15,129,1,0,0,0,17,134,1,0,0,0,19,142,1,0,0,0,21,152,1,0,0,0,23,161,
        1,0,0,0,25,167,1,0,0,0,27,169,1,0,0,0,29,172,1,0,0,0,31,174,1,0,
        0,0,33,176,1,0,0,0,35,178,1,0,0,0,37,180,1,0,0,0,39,182,1,0,0,0,
        41,184,1,0,0,0,43,186,1,0,0,0,45,188,1,0,0,0,47,190,1,0,0,0,49,192,
        1,0,0,0,51,194,1,0,0,0,53,196,1,0,0,0,55,198,1,0,0,0,57,200,1,0,
        0,0,59,202,1,0,0,0,61,210,1,0,0,0,63,222,1,0,0,0,65,235,1,0,0,0,
        67,238,1,0,0,0,69,245,1,0,0,0,71,251,1,0,0,0,73,254,1,0,0,0,75,257,
        1,0,0,0,77,259,1,0,0,0,79,261,1,0,0,0,81,264,1,0,0,0,83,267,1,0,
        0,0,85,270,1,0,0,0,87,273,1,0,0,0,89,275,1,0,0,0,91,92,5,44,0,0,
        92,2,1,0,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,105,0,0,96,
        97,5,99,0,0,97,98,5,105,0,0,98,99,5,111,0,0,99,4,1,0,0,0,100,101,
        5,118,0,0,101,102,5,97,0,0,102,103,5,114,0,0,103,6,1,0,0,0,104,105,
        5,109,0,0,105,106,5,117,0,0,106,107,5,101,0,0,107,108,5,99,0,0,108,
        109,5,104,0,0,109,110,5,101,0,0,110,8,1,0,0,0,111,112,5,99,0,0,112,
        113,5,104,0,0,113,114,5,105,0,0,114,10,1,0,0,0,115,116,5,115,0,0,
        116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,111,0,0,119,12,1,0,
        0,0,120,121,5,109,0,0,121,122,5,105,0,0,122,123,5,101,0,0,123,124,
        5,110,0,0,124,125,5,116,0,0,125,126,5,114,0,0,126,127,5,97,0,0,127,
        128,5,115,0,0,128,14,1,0,0,0,129,130,5,112,0,0,130,131,5,97,0,0,
        131,132,5,114,0,0,132,133,5,97,0,0,133,16,1,0,0,0,134,135,5,109,
        0,0,135,136,5,97,0,0,136,137,5,110,0,0,137,138,5,100,0,0,138,139,
        5,101,0,0,139,140,5,108,0,0,140,141,5,101,0,0,141,18,1,0,0,0,142,
        147,5,34,0,0,143,146,9,0,0,0,144,146,7,0,0,0,145,143,1,0,0,0,145,
        144,1,0,0,0,146,149,1,0,0,0,147,148,1,0,0,0,147,145,1,0,0,0,148,
        150,1,0,0,0,149,147,1,0,0,0,150,151,5,34,0,0,151,20,1,0,0,0,152,
        153,5,116,0,0,153,154,5,114,0,0,154,155,5,97,0,0,155,156,5,105,0,
        0,156,157,5,103,0,0,157,158,5,97,0,0,158,159,5,115,0,0,159,160,5,
        101,0,0,160,22,1,0,0,0,161,162,5,102,0,0,162,163,5,117,0,0,163,164,
        5,110,0,0,164,165,5,99,0,0,165,166,5,97,0,0,166,24,1,0,0,0,167,168,
        5,46,0,0,168,26,1,0,0,0,169,170,5,46,0,0,170,171,5,46,0,0,171,28,
        1,0,0,0,172,173,5,63,0,0,173,30,1,0,0,0,174,175,5,191,0,0,175,32,
        1,0,0,0,176,177,5,43,0,0,177,34,1,0,0,0,178,179,5,45,0,0,179,36,
        1,0,0,0,180,181,5,42,0,0,181,38,1,0,0,0,182,183,5,47,0,0,183,40,
        1,0,0,0,184,185,5,61,0,0,185,42,1,0,0,0,186,187,5,37,0,0,187,44,
        1,0,0,0,188,189,5,94,0,0,189,46,1,0,0,0,190,191,5,41,0,0,191,48,
        1,0,0,0,192,193,5,40,0,0,193,50,1,0,0,0,194,195,5,125,0,0,195,52,
        1,0,0,0,196,197,5,123,0,0,197,54,1,0,0,0,198,199,5,93,0,0,199,56,
        1,0,0,0,200,201,5,91,0,0,201,58,1,0,0,0,202,206,7,1,0,0,203,205,
        7,2,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,60,1,0,0,0,208,206,1,0,0,0,209,211,7,3,0,0,210,209,1,
        0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,220,1,
        0,0,0,214,216,5,46,0,0,215,217,7,3,0,0,216,215,1,0,0,0,217,218,1,
        0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,214,1,
        0,0,0,220,221,1,0,0,0,221,62,1,0,0,0,222,230,5,60,0,0,223,224,5,
        92,0,0,224,229,5,62,0,0,225,226,5,92,0,0,226,229,5,60,0,0,227,229,
        8,4,0,0,228,223,1,0,0,0,228,225,1,0,0,0,228,227,1,0,0,0,229,232,
        1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,
        1,0,0,0,233,234,5,62,0,0,234,64,1,0,0,0,235,236,5,59,0,0,236,66,
        1,0,0,0,237,239,7,0,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
        1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,6,33,0,0,243,68,
        1,0,0,0,244,246,7,5,0,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,6,34,0,0,250,70,
        1,0,0,0,251,252,5,61,0,0,252,253,5,61,0,0,253,72,1,0,0,0,254,255,
        5,33,0,0,255,256,5,61,0,0,256,74,1,0,0,0,257,258,5,62,0,0,258,76,
        1,0,0,0,259,260,5,60,0,0,260,78,1,0,0,0,261,262,5,62,0,0,262,263,
        5,61,0,0,263,80,1,0,0,0,264,265,5,60,0,0,265,266,5,61,0,0,266,82,
        1,0,0,0,267,268,5,38,0,0,268,269,5,38,0,0,269,84,1,0,0,0,270,271,
        5,124,0,0,271,272,5,124,0,0,272,86,1,0,0,0,273,274,5,33,0,0,274,
        88,1,0,0,0,275,276,5,34,0,0,276,277,1,0,0,0,277,278,6,44,1,0,278,
        90,1,0,0,0,11,0,145,147,206,212,218,220,228,230,240,247,2,6,0,0,
        0,1,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    PRINCIPAL = 2
    VAR = 3
    MUECHE = 4
    CHI = 5
    SINO = 6
    MIENTRAS = 7
    PARA = 8
    MANDELE = 9
    BLOQUE_FUNCION = 10
    TRAIGASE = 11
    FUNCA = 12
    PUNTO = 13
    PUNTOPUNTO = 14
    PREG_DER = 15
    PREG_IZQ = 16
    MAS = 17
    MENOS = 18
    MUL = 19
    DIV = 20
    IGUAL = 21
    MODULO = 22
    ELEVACION = 23
    PAR_DER = 24
    PAR_IZQ = 25
    LLAVE_DER = 26
    LLAVE_IZQ = 27
    COR_DER = 28
    COR_IZQ = 29
    ID = 30
    NUMERO = 31
    PALABRAS = 32
    PUNTO_COMA = 33
    NL = 34
    WS = 35
    IGUALDAD = 36
    DIFERENTE = 37
    MAYOR = 38
    MENOR = 39
    MAYOR_IGUAL = 40
    MENOR_IGUAL = 41
    AND = 42
    OR = 43
    NOT = 44
    COMILLAS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'inicio'", "'var'", "'mueche'", "'chi'", "'sino'", "'mientras'", 
            "'para'", "'mandele'", "'traigase'", "'funca'", "'.'", "'..'", 
            "'?'", "'\\u00BF'", "'+'", "'-'", "'*'", "'/'", "'='", "'%'", 
            "'^'", "')'", "'('", "'}'", "'{'", "']'", "'['", "';'", "'=='", 
            "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'", 
            "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", "PARA", 
            "MANDELE", "BLOQUE_FUNCION", "TRAIGASE", "FUNCA", "PUNTO", "PUNTOPUNTO", 
            "PREG_DER", "PREG_IZQ", "MAS", "MENOS", "MUL", "DIV", "IGUAL", 
            "MODULO", "ELEVACION", "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", 
            "COR_DER", "COR_IZQ", "ID", "NUMERO", "PALABRAS", "PUNTO_COMA", 
            "NL", "WS", "IGUALDAD", "DIFERENTE", "MAYOR", "MENOR", "MAYOR_IGUAL", 
            "MENOR_IGUAL", "AND", "OR", "NOT", "COMILLAS" ]

    ruleNames = [ "T__0", "PRINCIPAL", "VAR", "MUECHE", "CHI", "SINO", "MIENTRAS", 
                  "PARA", "MANDELE", "BLOQUE_FUNCION", "TRAIGASE", "FUNCA", 
                  "PUNTO", "PUNTOPUNTO", "PREG_DER", "PREG_IZQ", "MAS", 
                  "MENOS", "MUL", "DIV", "IGUAL", "MODULO", "ELEVACION", 
                  "PAR_DER", "PAR_IZQ", "LLAVE_DER", "LLAVE_IZQ", "COR_DER", 
                  "COR_IZQ", "ID", "NUMERO", "PALABRAS", "PUNTO_COMA", "NL", 
                  "WS", "IGUALDAD", "DIFERENTE", "MAYOR", "MENOR", "MAYOR_IGUAL", 
                  "MENOR_IGUAL", "AND", "OR", "NOT", "COMILLAS" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


